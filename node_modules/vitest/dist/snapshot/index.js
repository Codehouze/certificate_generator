import Snap from 'jest-snapshot';
import { after, before, beforeEach } from '../hooks';
import { SnapshotManager } from './manager';
const { addSerializer } = Snap;
let _manager;
export function SnapshotPlugin(options) {
    const { rootDir } = options;
    _manager = new SnapshotManager({
        rootDir,
        update: options.update,
    });
    return function (chai, utils) {
        before(async () => {
            _manager.snapshotResolver = await Snap.buildSnapshotResolver({
                transform: [],
                rootDir,
            });
        });
        beforeEach((task) => {
            var _a;
            _manager.setContext({
                file: ((_a = task.file) === null || _a === void 0 ? void 0 : _a.filepath) || task.name,
                title: task.name,
                fullTitle: [task.suite.name, task.name].filter(Boolean).join(' > '),
            });
        });
        after(() => {
            _manager.saveSnap();
            _manager.report();
        });
        for (const key of ['matchSnapshot', 'toMatchSnapshot']) {
            utils.addMethod(chai.Assertion.prototype, key, function (message) {
                const expected = utils.flag(this, 'object');
                _manager.assert(expected, message);
            });
        }
        chai.expect.addSnapshotSerializer = addSerializer;
    };
}
